{"version":3,"sources":["utils/api.tsx","store/index.ts","components/Filters/Filters.tsx","components/UserInfo/UserInfo.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/ErrorOnLoad/ErrorOnLoad.tsx","components/NoUserSelected/NoUserSelected.tsx","App.tsx","index.tsx"],"names":["request","url","fetch","then","response","ok","Error","status","statusText","json","result","data","getTodos","a","getUser","id","console","log","setTodos","todos","type","value","setQuery","query","setUserID","getListOfTodos","state","isErrorTodo","isErrorTODO","getErrorText","errorText","getQuery","getNewUser","user","getUserID","userId","isErrorUser","getLoadUserError","userErrorText","initialState","sortBy","store","createStore","action","composeWithDevTools","applyMiddleware","thunk","Filters","dispatch","useDispatch","currentTodos","useSelector","location","useLocation","history","useHistory","searchParams","URLSearchParams","search","get","applyQuery","useCallback","debounce","newQuery","set","delete","push","toString","sortBySelector","sortQuery","className","onClick","indx","length","newIndx","Math","floor","random","temp","name","placeholder","onChange","e","target","UserInfo","fetchUserDetails","setUser","catch","error","setUserErrorText","message","useEffect","email","phone","TodoItem","todo","readOnly","title","filter","item","TodoList","appliedQuery","visibleTodos","useMemo","titleFromQuery","toLowerCase","includes","sortedList","isSortBy","completed","map","key","ErrorOnLoad","NoUserSelected","App","isTodosLoadError","isUserLoadError","queryFromURL","fetchTodos","setErrorText","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.12350854.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com';\n\nconst request = (url:string) => fetch(`${BASE_URL}${url}`)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const getTodos = async () => {\n  const response = await request('/todos');\n\n  return response;\n};\n\nexport const getUser = async (id: number) => {\n  const response = await request(`/users/${id}`);\n\n  console.log(response);\n\n  return response;\n};\n","/* eslint-disable max-len */\nimport {\n  createStore, AnyAction, applyMiddleware, Dispatch,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport { getTodos, getUser } from '../utils/api';\nimport { TODO, User, RootState } from '../utils/types';\n\n// Action types - is just a constant. MUST have a unique value.\nconst GET_TODOS = 'GET_TODOS';\nconst TODOS_ERROR_STATE = 'TODOS_ERROR_STATE';\nconst TODOS_ERROR_TEXT = 'TODOS_ERROR_TEXT';\nconst SET_QUERY = 'SET_QUERY';\nconst SET_SORTBY = 'SET_SORTBY';\nconst SET_USER = 'SET_USER';\nconst SET_USERID = 'SET_USERID';\nconst SET_USER_ERROR_STATE = 'SET_USER_ERROR_STATE';\nconst USER_ERROR_TEXT = 'USER_ERROR_TEXT';\n\n// Action creators - a function returning an action object\nexport const setTodos = (todos: TODO[]) => ({ type: GET_TODOS, value: todos });\nexport const setErrorStatus = (error: boolean) => ({ type: TODOS_ERROR_STATE, value: error });\nexport const setErrorText = (error: string) => ({ type: TODOS_ERROR_TEXT, value: error });\nexport const setQuery = (query: string) => ({ type: SET_QUERY, value: query });\nexport const setSortBy = (sortBy: string) => ({ type: SET_SORTBY, value: sortBy });\nexport const setUser = (user: User) => ({ type: SET_USER, value: user });\nexport const setUserID = (id: number) => ({ type: SET_USERID, value: id });\nexport const setUserErrorStatus = (error: boolean) => ({ type: SET_USER_ERROR_STATE, value: error });\nexport const setUserErrorText = (error: string) => ({ type: USER_ERROR_TEXT, value: error });\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const getListOfTodos = (state: RootState) => state.todos;\nexport const isErrorTodo = (state: RootState) => state.isErrorTODO;\nexport const getErrorText = (state: RootState) => state.errorText;\nexport const getQuery = (state: RootState) => state.query;\nexport const getSortQuery = (state: RootState) => state.sortBy;\nexport const getNewUser = (state: RootState) => state.user;\nexport const getUserID = (state: RootState) => state.userId;\nexport const isErrorUser = (state: RootState) => state.isErrorUser;\nexport const getLoadUserError = (state: RootState) => state.userErrorText;\n\n// Initial stat\nconst initialState: RootState = {\n  todos: [],\n  isErrorTODO: false,\n  isErrorUser: false,\n  errorText: '',\n  userErrorText: '',\n  query: '',\n  sortBy: '',\n  user: {},\n  userId: 0,\n};\n\nexport const getTodosfromServer = () => {\n  return (dispatch: Dispatch) => {\n    getTodos()\n      .then((todos) => {\n        dispatch(setTodos(todos));\n      })\n      .catch((result) => {\n        dispatch(setErrorStatus(true));\n        dispatch(setErrorText(result.message));\n      });\n  };\n};\n\nexport const getUserFromServer = (id: number) => {\n  return (dispatch: Dispatch) => {\n    getUser(id)\n      .then((user) => {\n        dispatch(setUser(user));\n      })\n      .catch((result) => {\n        dispatch(setUserErrorStatus(true));\n        dispatch(setUserErrorText(result.message));\n      });\n  };\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case GET_TODOS:\n      return {\n        ...state,\n        todos: [...action.value],\n      };\n\n    case TODOS_ERROR_STATE:\n      return {\n        ...state,\n        isErrorTODO: action.value,\n      };\n\n    case TODOS_ERROR_TEXT:\n      return {\n        ...state,\n        errorText: action.value,\n      };\n\n    case SET_QUERY:\n      return {\n        ...state,\n        query: action.value,\n      };\n\n    case SET_SORTBY:\n      return {\n        ...state,\n        sortBy: action.value,\n      };\n\n    case SET_USER:\n      return {\n        ...state,\n        user: action.value,\n      };\n\n    case SET_USERID:\n      return {\n        ...state,\n        userId: action.value,\n      };\n\n    case SET_USER_ERROR_STATE:\n      return {\n        ...state,\n        isErrorUser: action.value,\n      };\n\n    case USER_ERROR_TEXT:\n      return {\n        ...state,\n        userErrorText: action.value,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","import React, { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport debounce from 'lodash/debounce';\n\nimport {\n  getQuery, setQuery, setTodos, getListOfTodos,\n} from '../../store';\n\nexport const Filters = () => {\n  const dispatch = useDispatch();\n  const currentTodos = useSelector(getListOfTodos);\n  const location = useLocation();\n  const history = useHistory();\n  const searchParams = new URLSearchParams(location.search);\n  const sortBy = searchParams.get('sortBy') || '';\n  const query = useSelector(getQuery);\n\n  const applyQuery = useCallback(\n    debounce((newQuery: string | null) => {\n      if (newQuery) {\n        searchParams.set('query', newQuery);\n      } else {\n        searchParams.delete('query');\n      }\n\n      history.push({ search: searchParams.toString() });\n    }, 500), [],\n  );\n\n  const sortBySelector = useCallback((sortQuery) => {\n    if (sortQuery) {\n      searchParams.set('sortBy', sortQuery);\n    } else {\n      searchParams.delete('sortBy');\n    }\n\n    history.push({ search: searchParams.toString() });\n  }, [sortBy]);\n\n  const handleRandom = () => {\n    const todos = [...currentTodos];\n\n    for (let indx = todos.length - 1; indx > 0; indx -= 1) {\n      const newIndx = Math.floor(Math.random() * (indx + 1));\n      const temp = todos[indx];\n\n      todos[indx] = todos[newIndx];\n      todos[newIndx] = temp;\n    }\n\n    dispatch(setTodos(todos));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>List of Todos:</h2>\n      <div className=\"TodoList__container\">\n        <button\n          type=\"button\"\n          className=\"Randomize\"\n          onClick={handleRandom}\n        >\n          Randomize\n        </button>\n        <label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            value={query}\n            placeholder=\"Filter by title\"\n            onChange={(e) => {\n              const { value } = e.target;\n\n              dispatch(setQuery(value));\n              applyQuery(value);\n            }}\n          />\n        </label>\n        <select\n          name=\"status\"\n          value={sortBy}\n          onChange={(e) => {\n            const { value } = e.target;\n\n            sortBySelector(value);\n          }}\n        >\n          <option value=\"\">Choose status</option>\n          <option value=\"all\">All</option>\n          <option value=\"false\">Active</option>\n          <option value=\"true\">Completed</option>\n        </select>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  getUserFromServer, getNewUser, getUserID, setUserID,\n} from '../../store';\nimport { User } from '../../utils/types';\nimport './UserInfo.scss';\n\nexport const UserInfo = () => {\n  const dispatch = useDispatch();\n  const user: User = useSelector(getNewUser);\n  const userId: number = useSelector(getUserID);\n\n  const fetchUserDetails = () => {\n    return dispatch(getUserFromServer(userId));\n  };\n\n  useEffect(() => {\n    fetchUserDetails();\n  }, [userId]);\n\n  if (!user) {\n    return (\n      <h3 className=\"UserInfo__selected\"> No User Selected </h3>\n    );\n  }\n\n  return (\n    <div className=\"UserInfo\">\n      <h2 className=\"UserInfo__title\">\n        <span>\n          Selected user#\n          {user.id}\n        </span>\n      </h2>\n      <h3 className=\"UserInfo__name\">{user.name}</h3>\n      <p className=\"UserInfo__email\">{user.email}</p>\n      <p className=\"UserInfo__phone\">{user.phone}</p>\n      <button\n        type=\"button\"\n        className=\"UserInfo__button\"\n        onClick={() => {\n          if (user.id) {\n            dispatch(setUserID(0));\n          }\n        }}\n      >\n        Clear User\n      </button>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  getListOfTodos, setTodos, getUserID, setUserID,\n} from '../../store';\nimport { PropState } from '../../utils/types';\n\nexport const TodoItem: FC<PropState> = ({ todo }) => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getListOfTodos);\n  const userId = useSelector(getUserID);\n\n  return (\n    <>\n      <label>\n        <input\n          type=\"checkbox\"\n          readOnly\n        />\n        <p>{todo.title}</p>\n      </label>\n      <div className=\"Button_container\">\n        { userId === todo.userId ? (\n          <button\n            type=\"button\"\n            className=\"TodoList__user-button--selected\"\n            onClick={() => {\n              dispatch(setUserID(0));\n            }}\n          >\n            User#\n            {todo.userId}\n          </button>\n        ) : (\n          <button\n            type=\"button\"\n            className=\"TodoList__user-button--unselected\"\n            onClick={() => {\n              dispatch(setUserID(todo.userId));\n            }}\n          >\n            User#\n            {todo.userId}\n          </button>\n        )}\n        <button\n          className=\"TodoList__todo-button\"\n          onClick={() => {\n            dispatch(setTodos(todos.filter(item => item.id !== todo.id)));\n          }}\n        >\n          Remove Todo\n        </button>\n      </div>\n    </>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\n\nimport { getListOfTodos } from '../../store';\n\nimport { TodoItem } from '../TodoItem';\nimport { TODO } from '../../utils/types';\nimport './TodoList.scss';\n\nexport const TodoList = () => {\n  const todos: TODO[] = useSelector(getListOfTodos);\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const appliedQuery = searchParams.get('query') || '';\n  const sortBy = searchParams.get('sortBy') || '';\n\n  const visibleTodos = useMemo(() => {\n    if (!appliedQuery) {\n      return todos;\n    }\n\n    const titleFromQuery = appliedQuery.toLowerCase();\n\n    return todos.filter(({ title }) => ` ${title || ''}`.toLowerCase().includes(titleFromQuery));\n  }, [todos, appliedQuery]);\n\n  const sortedList = useMemo(() => {\n    if (!sortBy || sortBy === 'all') {\n      return visibleTodos;\n    }\n\n    const isSortBy = (sortBy === 'true');\n\n    return visibleTodos.filter((todo) => todo.completed === isSortBy);\n  }, [sortBy, visibleTodos]);\n\n  return (\n    <>\n      <ul>\n        {sortedList.map((todo: TODO) => (\n          <li\n            key={todo.id}\n            className=\"TodoList__item TodoList__item--unchecked\"\n          >\n            <TodoItem\n              todo={todo}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { getErrorText } from '../../store';\n\nexport const ErrorOnLoad = () => {\n  const errorText: string = useSelector(getErrorText);\n\n  return (\n    <h3 className=\"error\">{errorText}</h3>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { getLoadUserError } from '../../store';\n\nexport const NoUserSelected = () => {\n  const errorText: string = useSelector(getLoadUserError);\n\n  return (\n    <h3 className=\"error\">{errorText}</h3>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\n\nimport './App.scss';\nimport { Filters } from './components/Filters';\nimport { UserInfo } from './components/UserInfo';\nimport { TodoList } from './components/TodoList';\nimport { ErrorOnLoad } from './components/ErrorOnLoad';\nimport { NoUserSelected } from './components/NoUserSelected';\nimport {\n  getTodosfromServer, isErrorTodo, setQuery, isErrorUser,\n} from './store';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const isTodosLoadError = useSelector(isErrorTodo);\n  const isUserLoadError = useSelector(isErrorUser);\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const queryFromURL = searchParams.get('query') || '';\n\n  const fetchTodos = () => {\n    return dispatch(getTodosfromServer());\n  };\n\n  useEffect(() => {\n    dispatch(setQuery(queryFromURL));\n    fetchTodos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <h1>Redux list of todos</h1>\n        {isUserLoadError === false\n          ? (<UserInfo />)\n          : <NoUserSelected />}\n        <Filters />\n        { isTodosLoadError === false\n          ? <TodoList />\n          : <ErrorOnLoad /> }\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}